#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	printf("sizeof(char)         = %zu\n", sizeof(char));
	printf("sizeof(char *)       = %zu\n", sizeof(char *));

	printf("sizeof(short)        = %zu\n", sizeof(short));
	printf("sizeof(short *)      = %zu\n", sizeof(short *));

	printf("sizeof(int)          = %zu\n", sizeof(int));
	printf("sizeof(int *)        = %zu\n", sizeof(int *));

	printf("sizeof(long)         = %zu\n", sizeof(long));
	printf("sizeof(long *)       = %zu\n", sizeof(long *));

	printf("sizeof(long long)    = %zu\n", sizeof(long long));
	printf("sizeof(long long *)  = %zu\n", sizeof(long long *));

	printf("sizeof(double)       = %zu\n", sizeof(double));
	printf("sizeof(double *)     = %zu\n", sizeof(double *));
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#include <stdio.h>

int main()
{
	int x = 10;
	
	int *ptr; //ptr is a pointer to int
	double *dptr; //dptr is a pointer to double

	int *ptr = expr;

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------





int main()
{
	//int * p1, p2, p3;
	int *p1;
	int p2;
	int p3;
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


int main()
{
	int * p1, *p2, *p3;
	//int *p1;
	//int *p2;
	//int *p3;
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


int main()
{
	int *ptr;
	int* p;
	int * px;
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


int main()
{
	//int x, y[10], z, *t;
	int x;
	int y[10];
	int z;
	int *t;

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


//Dikkat C++ dili ile C dili arasında 4 tipik ifade icin
//deger kategorilerinde farklılık söz konusu

int main()
{
	//&4;  gecersiz
	int x = 10;
	int y = 10;
	//&x; //gecerli
	//&+x; //gecersiz

	//asagidaki ifadeler C++'da L val expr. C'de R value ecpr

	&++x; 
	&--x;

	&(x, y);

	&(1 ? x : y);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


int main()
{
	int x = 10;
	int y = 34;

	//error C2106 : '=' : left operand must be l - value
	&x = &y;
	
	//Yukarıdaki iafadenni geçersiz olmasının nedeni atama operatörünün sol operandı olan
	// &x ifadesinin R val olması (L val olmaması)

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



int main()
{
	int x = 10;
	int y = 34;

	//error C2106 : '=' : left operand must be l - value
	&x = &y;
	
	//Yukarıdaki iafadenni geçersiz olmasının nedeni atama operatörünün sol operandı olan
	// &x ifadesinin R val olması (L val olmaması)

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



int main()
{
	int x = 10;
	int y = 20;
	
	int *ptr = &x;   //initialization

	//code

	ptr = &y;   //assignment
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


/*
	asla bir pointer değişkene
	bir tamsayı ya da bir gerçek sayı ifadesi ile ilk değer vermeyin
	ya da böyle bir değeri ona atamayın.
	sentaks hatası olmaması kodun doğru olduğu anlamına gelmiyor
*/

//warning C4047 : 'initializing' : 'int *' differs in levels of indirection from 'int'
int main()
{
	int *ptr = 2000;
	//C'de gecerli ama yanlis
	//C++'da gecersiz

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


int main()
{
	double dval = 23.54;
	int *ptr = &dval; //C++'da gecersiz C'de gecerli ama yanlış
	//warning C4133: 'initializing': incompatible types - from 'double *' to 'int *'

	/*
		asla bir pointer değişkene uygun (uyumlu) olmayan bir türden nesne adresi ile ilk değer vermeyin
		ya da böyle bir atama yapmayın
	*/
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>

int main()
{
	int x = 10;
	int *ptr = &x;
	//ptr'nin degeri x'in adresi
	//ptr x'i gosteriyor
	//ptr points to x

	printf("&x      = (%p)\n", &x);
	printf("ptr     = (%p)\n", ptr);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>

int main()
{
	int x = 10;
	int y = x;
	int *p1 = &x;
	int *p2 = p1;

	/*
		bir pointer değişkene aynı türden bir başka pointer değişkenin değerini
		atayabiliriz, ya da ilk değer olarak verebiliriz
	
	*/


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#include <stdio.h>

int main()
{
	int a[] = { 12, 45, 67, 20, 90 };
	int *p = a;
	//int *p = &a[0];

	printf("&a[0]    = %p\n", &a[0]);
	printf("a        = %p\n", a);
	printf("p        = %p\n", p);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>

int main()
{
	int a[] = { 12, 45, 67, 20, 90 };
	int b[] = { 1, 5, 7, 3 };

	//int *p = &a[0];
	int *p = a; //bu bildirim ile p pointer degiskenine a dizisinin ilk ogesinin adresi ile 
	//ilk deger veriliyor
	//code


	p = b; //p pointer değişkenine b dizisinin ilk öğesinin adresi atanuyor



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#include <stdio.h>


/*
	Dikkat!
	mulakatlarda sorulan tipik bir soru
	bir dizi isminin ifade içinde kullanılmasına karşın 
	adrese dönüştürülmediği istisnai durum nedir
	yanit: dizi isminin sizeof operatörünün operandı olması
*/

int main()
{
	int a[] = { 1, 2, 3, 4, 7 };

	printf("sizeof(a) = %zu\n", sizeof(a));
	printf("sizeof(&a[0]) = %zu\n", sizeof(&a[0]));
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>

int main()
{
	int x = 10;
	int a[20] = { 0 };
	int *ptr = &x;

	//*45;  //gecersiz
	//*x;  //gecersiz
	*&x; //gecerli
	*a; //gecerli
	*ptr; //gecerli


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------






